{"version":3,"file":"static/js/62.63b984bb.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/pack-1bf3abd2.esm.js"],"sourcesContent":["import { _ as _defineProperty } from './defineProperty-e24c82ea.esm.js';\nimport { cO as AddressSchema, cP as BigNumberishSchema, cQ as RawDateSchema, aP as StandardErc1155, cB as ContractWrapper, aI as Erc1155, aj as ContractMetadata, cR as PackContractSchema, ak as ContractRoles, al as ContractRoyalty, ai as ContractEncoder, aT as GasCostEstimator, aU as ContractEvents, aV as ContractInterceptor, aY as ContractOwner, bx as getRoleHash, b5 as fetchCurrencyMetadata, cI as uploadOrExtractURI, b6 as normalizePriceValue, cJ as hasERC20Allowance, cK as isTokenApprovedForTransfer } from './thirdweb-checkout-3c43aa10.esm.js';\nimport { A as AmountSchema, N as NFTInputOrUriSchema } from './QueryParams-5f9e3d4a.esm.js';\nimport { z } from 'zod';\nimport { ethers, BigNumber } from 'ethers';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport 'eventemitter3';\nimport 'cross-fetch';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/DropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/DropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/DropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport 'bn.js';\n\n/**\n * @internal\n */\nconst CommonWrappableSchema = z.object({\n  contractAddress: AddressSchema\n});\n\n/**\n * @internal\n */\nconst ERC20WrappableSchema = CommonWrappableSchema.extend({\n  quantity: AmountSchema\n});\n\n/**\n * @internal\n */\nconst ERC721WrappableSchema = CommonWrappableSchema.extend({\n  tokenId: BigNumberishSchema\n});\n\n/**\n * @internal\n */\nconst ERC1155WrappableSchema = CommonWrappableSchema.extend({\n  tokenId: BigNumberishSchema,\n  quantity: BigNumberishSchema\n});\n\n/**\n * @internal\n */\nconst ERC20RewardSchema = ERC20WrappableSchema.omit({\n  quantity: true\n}).extend({\n  quantityPerReward: AmountSchema\n});\n\n/**\n * @internal\n */\nconst ERC721RewardSchema = ERC721WrappableSchema;\n\n/**\n * @internal\n */\nconst ERC1155RewardSchema = ERC1155WrappableSchema.omit({\n  quantity: true\n}).extend({\n  quantityPerReward: BigNumberishSchema\n});\n\n/**\n * @internal\n */\nconst ERC20RewardContentsSchema = ERC20RewardSchema.extend({\n  totalRewards: BigNumberishSchema.default(\"1\")\n});\n\n/**\n * @internal\n */\nconst ERC721RewardContentsSchema = ERC721RewardSchema;\n\n/**\n * @internal\n */\nconst ERC1155RewardContentsSchema = ERC1155RewardSchema.extend({\n  totalRewards: BigNumberishSchema.default(\"1\")\n});\n\n/**\n * @internal\n */\nz.object({\n  erc20Rewards: z.array(ERC20RewardSchema).default([]),\n  erc721Rewards: z.array(ERC721RewardSchema).default([]),\n  erc1155Rewards: z.array(ERC1155RewardSchema).default([])\n});\n\n/**\n * @internal\n */\nconst PackRewardsOutputSchema = z.object({\n  erc20Rewards: z.array(ERC20RewardContentsSchema).default([]),\n  erc721Rewards: z.array(ERC721RewardContentsSchema).default([]),\n  erc1155Rewards: z.array(ERC1155RewardContentsSchema).default([])\n});\n\n/**\n * @internal\n */\nconst PackMetadataInputSchema = PackRewardsOutputSchema.extend({\n  packMetadata: NFTInputOrUriSchema,\n  rewardsPerPack: BigNumberishSchema.default(\"1\"),\n  openStartTime: RawDateSchema.default(new Date())\n});\n\n/**\n * @public\n */\n\n/**\n * Create lootboxes of NFTs with rarity based open mechanics.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"pack\");\n * ```\n *\n * @public\n */\nclass Pack extends StandardErc1155 {\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per pack\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular pack\n   * contract.royalties.setTokenRoyaltyInfo(packId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options.gasless && \"openzeppelin\" in options.gasless ? {\n      ...options,\n      gasless: {\n        openzeppelin: {\n          ...options.gasless.openzeppelin,\n          useEOAForwarder: true\n        }\n      }\n    } : options);\n    super(contractWrapper, storage, chainId);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"roles\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"royalties\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"erc1155\", void 0);\n    _defineProperty(this, \"owner\", void 0);\n    this.abi = abi;\n    this.erc1155 = new Erc1155(this.contractWrapper, this.storage, chainId);\n    this.metadata = new ContractMetadata(this.contractWrapper, PackContractSchema, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Pack.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.owner = new ContractOwner(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a single Pack\n   *\n   * @remarks Get all the data associated with every pack in this contract.\n   *\n   * By default, returns the first 100 packs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const pack = await contract.get(0);\n   * console.log(packs;\n   * ```\n   */\n  async get(tokenId) {\n    return this.erc1155.get(tokenId);\n  }\n\n  /**\n   * Get All Packs\n   *\n   * @remarks Get all the data associated with every pack in this contract.\n   *\n   * By default, returns the first 100 packs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const packs = await contract.getAll();\n   * console.log(packs;\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The pack metadata for all packs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc1155.getAll(queryParams);\n  }\n\n  /**\n   * Get Owned Packs\n   *\n   * @remarks Get all the data associated with the packs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the packs of\n   * const address = \"{{wallet_address}}\";\n   * const packss = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The pack metadata for all the owned packs in the contract.\n   */\n  async getOwned(walletAddress) {\n    return this.erc1155.getOwned(walletAddress);\n  }\n\n  /**\n   * Get the number of packs created\n   * @returns the total number of packs minted in this contract\n   * @public\n   */\n  async getTotalCount() {\n    return this.erc1155.totalCount();\n  }\n\n  /**\n   * Get whether users can transfer packs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash(\"transfer\"), ethers.constants.AddressZero);\n    return !anyoneCanTransfer;\n  }\n\n  /**\n   * Get Pack Contents\n   * @remarks Get the rewards contained inside a pack.\n   *\n   * @param packId - The id of the pack to get the contents of.\n   * @returns - The contents of the pack.\n   *\n   * @example\n   * ```javascript\n   * const packId = 0;\n   * const contents = await contract.getPackContents(packId);\n   * console.log(contents.erc20Rewards);\n   * console.log(contents.erc721Rewards);\n   * console.log(contents.erc1155Rewards);\n   * ```\n   */\n  async getPackContents(packId) {\n    const {\n      contents,\n      perUnitAmounts\n    } = await this.contractWrapper.readContract.getPackContents(packId);\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n    for (let i = 0; i < contents.length; i++) {\n      const reward = contents[i];\n      const amount = perUnitAmounts[i];\n      switch (reward.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), reward.assetContract);\n            const rewardAmount = ethers.utils.formatUnits(reward.totalAmount, tokenMetadata.decimals);\n            erc20Rewards.push({\n              contractAddress: reward.assetContract,\n              quantityPerReward: amount.toString(),\n              totalRewards: BigNumber.from(rewardAmount).div(amount).toString()\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString()\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString(),\n              quantityPerReward: amount.toString(),\n              totalRewards: BigNumber.from(reward.totalAmount).div(amount).toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Pack\n   * @remarks Create a new pack with the given metadata and rewards and mint it to the connected wallet.\n   * @remarks See {@link Pack.createTo}\n   *\n   * @param metadataWithRewards - the metadata and rewards to include in the pack\n   * @example\n   * ```javascript\n   * const pack = {\n   *   // The metadata for the pack NFT itself\n   *   packMetadata: {\n   *     name: \"My Pack\",\n   *     description: \"This is a new pack\",\n   *     image: \"ipfs://...\",\n   *   },\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n   *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n   * }\n   *\n   * const tx = await contract.create(pack);\n   * ```\n   */\n  async create(metadataWithRewards) {\n    const signerAddress = await this.contractWrapper.getSignerAddress();\n    return this.createTo(signerAddress, metadataWithRewards);\n  }\n\n  /**\n   * Add Pack Contents\n   * @remarks Add contents to an existing pack.\n   * @remarks See {@link Pack.addPackContents}\n   *\n   * @param packId - token Id of the pack to add contents to\n   * @param packContents - the rewards to include in the pack\n   * @example\n   * ```javascript\n   * const packContents = {\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   * }\n   *\n   * const tx = await contract.addPackContents(packId, packContents);\n   * ```\n   */\n  async addPackContents(packId, packContents) {\n    const signerAddress = await this.contractWrapper.getSignerAddress();\n    const parsedContents = PackRewardsOutputSchema.parse(packContents);\n    const {\n      contents,\n      numOfRewardUnits\n    } = await this.toPackContentArgs(parsedContents);\n    const receipt = await this.contractWrapper.sendTransaction(\"addPackContents\", [packId, contents, numOfRewardUnits, signerAddress]);\n    const event = this.contractWrapper.parseLogs(\"PackUpdated\", receipt?.logs);\n    if (event.length === 0) {\n      throw new Error(\"PackUpdated event not found\");\n    }\n    const id = event[0].args.packId;\n    return {\n      id: id,\n      receipt,\n      data: () => this.erc1155.get(id)\n    };\n  }\n\n  /**\n   * Create Pack To Wallet\n   * @remarks Create a new pack with the given metadata and rewards and mint it to the specified address.\n   *\n   * @param to - the address to mint the pack to\n   * @param metadataWithRewards - the metadata and rewards to include in the pack\n   *\n   * @example\n   * ```javascript\n   * const pack = {\n   *   // The metadata for the pack NFT itself\n   *   packMetadata: {\n   *     name: \"My Pack\",\n   *     description: \"This is a new pack\",\n   *     image: \"ipfs://...\",\n   *   },\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n   *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n   * }\n   *\n   * const tx = await contract.createTo(\"0x...\", pack);\n   * ```\n   */\n  async createTo(to, metadataWithRewards) {\n    const uri = await uploadOrExtractURI(metadataWithRewards.packMetadata, this.storage);\n    const parsedMetadata = PackMetadataInputSchema.parse(metadataWithRewards);\n    const {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    } = parsedMetadata;\n    const rewardsData = {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n    const {\n      contents,\n      numOfRewardUnits\n    } = await this.toPackContentArgs(rewardsData);\n    const receipt = await this.contractWrapper.sendTransaction(\"createPack\", [contents, numOfRewardUnits, uri, parsedMetadata.openStartTime, parsedMetadata.rewardsPerPack, to]);\n    const event = this.contractWrapper.parseLogs(\"PackCreated\", receipt?.logs);\n    if (event.length === 0) {\n      throw new Error(\"PackCreated event not found\");\n    }\n    const packId = event[0].args.packId;\n    return {\n      id: packId,\n      receipt,\n      data: () => this.erc1155.get(packId)\n    };\n  }\n\n  /**\n   * Open Pack\n   *\n   * @remarks - Open a pack to reveal the contained rewards. This will burn the specified pack and\n   * the contained assets will be transferred to the opening users wallet.\n   *\n   * @param tokenId - the token ID of the pack you want to open\n   * @param amount - the amount of packs you want to open\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0\n   * const amount = 1\n   * const tx = await contract.open(tokenId, amount);\n   * ```\n   */\n  async open(tokenId) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    const receipt = await this.contractWrapper.sendTransaction(\"openPack\", [tokenId, amount], {\n      // Higher gas limit for opening packs\n      gasLimit: 500000\n    });\n    const event = this.contractWrapper.parseLogs(\"PackOpened\", receipt?.logs);\n    if (event.length === 0) {\n      throw new Error(\"PackOpened event not found\");\n    }\n    const rewards = event[0].args.rewardUnitsDistributed;\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n    for (const reward of rewards) {\n      switch (reward.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), reward.assetContract);\n            erc20Rewards.push({\n              contractAddress: reward.assetContract,\n              quantityPerReward: ethers.utils.formatUnits(reward.totalAmount, tokenMetadata.decimals).toString()\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString()\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString(),\n              quantityPerReward: reward.totalAmount.toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n  }\n\n  /** *****************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async toPackContentArgs(metadataWithRewards) {\n    const contents = [];\n    const numOfRewardUnits = [];\n    const {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    } = metadataWithRewards;\n    const provider = this.contractWrapper.getProvider();\n    const owner = await this.contractWrapper.getSignerAddress();\n    for (const erc20 of erc20Rewards) {\n      const normalizedQuantity = await normalizePriceValue(provider, erc20.quantityPerReward, erc20.contractAddress);\n      // Multiply the quantity of one reward by the number of rewards\n      const totalQuantity = normalizedQuantity.mul(erc20.totalRewards);\n      const hasAllowance = await hasERC20Allowance(this.contractWrapper, erc20.contractAddress, totalQuantity);\n      if (!hasAllowance) {\n        throw new Error(`ERC20 token with contract address \"${erc20.contractAddress}\" does not have enough allowance to transfer.\\n\\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\\n\\nawait sdk.getToken(\"${erc20.contractAddress}\").setAllowance(\"${this.getAddress()}\", ${totalQuantity});\\n\\n`);\n      }\n      numOfRewardUnits.push(erc20.totalRewards);\n      contents.push({\n        assetContract: erc20.contractAddress,\n        tokenType: 0,\n        totalAmount: totalQuantity,\n        tokenId: 0\n      });\n    }\n    for (const erc721 of erc721Rewards) {\n      const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc721.contractAddress, erc721.tokenId, owner);\n      if (!isApproved) {\n        throw new Error(`ERC721 token \"${erc721.tokenId}\" with contract address \"${erc721.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getNFTCollection(\"${erc721.contractAddress}\").setApprovalForToken(\"${this.getAddress()}\", ${erc721.tokenId});\\n\\n`);\n      }\n      numOfRewardUnits.push(\"1\");\n      contents.push({\n        assetContract: erc721.contractAddress,\n        tokenType: 1,\n        totalAmount: 1,\n        tokenId: erc721.tokenId\n      });\n    }\n    for (const erc1155 of erc1155Rewards) {\n      const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc1155.contractAddress, erc1155.tokenId, owner);\n      if (!isApproved) {\n        throw new Error(`ERC1155 token \"${erc1155.tokenId}\" with contract address \"${erc1155.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getEdition(\"${erc1155.contractAddress}\").setApprovalForAll(\"${this.getAddress()}\", true);\\n\\n`);\n      }\n      numOfRewardUnits.push(erc1155.totalRewards);\n      contents.push({\n        assetContract: erc1155.contractAddress,\n        tokenType: 2,\n        totalAmount: BigNumber.from(erc1155.quantityPerReward).mul(BigNumber.from(erc1155.totalRewards)),\n        tokenId: erc1155.tokenId\n      });\n    }\n    return {\n      contents,\n      numOfRewardUnits\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n}\n_defineProperty(Pack, \"contractRoles\", [\"admin\", \"minter\", \"asset\", \"transfer\"]);\n\nexport { Pack };\n"],"names":["CommonWrappableSchema","z","contractAddress","AddressSchema","ERC20WrappableSchema","extend","quantity","AmountSchema","ERC721WrappableSchema","tokenId","BigNumberishSchema","ERC1155WrappableSchema","ERC20RewardSchema","omit","quantityPerReward","ERC721RewardSchema","ERC1155RewardSchema","ERC20RewardContentsSchema","totalRewards","ERC721RewardContentsSchema","ERC1155RewardContentsSchema","erc20Rewards","default","erc721Rewards","erc1155Rewards","PackRewardsOutputSchema","PackMetadataInputSchema","packMetadata","NFTInputOrUriSchema","rewardsPerPack","openStartTime","RawDateSchema","Date","Pack","network","address","storage","options","arguments","length","undefined","abi","chainId","contractWrapper","ContractWrapper","gasless","openzeppelin","useEOAForwarder","_defineProperty","erc1155","Erc1155","metadata","ContractMetadata","PackContractSchema","roles","ContractRoles","contractRoles","royalties","ContractRoyalty","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","interceptor","ContractInterceptor","owner","ContractOwner","this","updateSignerOrProvider","readContract","get","queryParams","getAll","walletAddress","getOwned","totalCount","hasRole","getRoleHash","ethers","anyoneCanTransfer","packId","getPackContents","contents","perUnitAmounts","i","reward","amount","tokenType","fetchCurrencyMetadata","getProvider","assetContract","tokenMetadata","rewardAmount","totalAmount","decimals","push","toString","BigNumber","div","metadataWithRewards","getSignerAddress","signerAddress","createTo","packContents","parsedContents","parse","toPackContentArgs","numOfRewardUnits","sendTransaction","receipt","event","parseLogs","logs","Error","id","args","data","to","uploadOrExtractURI","uri","parsedMetadata","rewardsData","gasLimit","rewards","rewardUnitsDistributed","provider","erc20","normalizePriceValue","normalizedQuantity","totalQuantity","mul","hasERC20Allowance","getAddress","erc721","isTokenApprovedForTransfer","functionName","_len","Array","_key","call","StandardErc1155"],"sourceRoot":""}